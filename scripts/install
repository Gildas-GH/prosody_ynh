#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# MANAGE SCRIPT FAILURE
#=================================================

ynh_clean_setup () {
	ynh_clean_check_starting
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# RETRIEVE ARGUMENTS FROM THE MANIFEST
#=================================================

app=$YNH_APP_INSTANCE_NAME

#=================================================
# DISABLE METRONOME
#=================================================
ynh_script_progression --message="Disabling Metronome..."

if systemctl list-unit-files metronome.service &>/dev/null
then
	ynh_systemd_action --service_name="metronome" --action="stop"
	systemctl disable metronome.service --quiet
fi

#=================================================
# STORE SETTINGS FROM MANIFEST
#=================================================
ynh_script_progression --message="Storing installation settings..."

#=================================================
# STANDARD MODIFICATIONS
#=================================================
# FIND AND OPEN A PORT
#=================================================
ynh_script_progression --message="Finding an available port..."

# Find an available port
file_port=5000
client_port=5222
server_port=5269
http_port=5280
https_port=5281
component_port=5347
telnet_port=5582
ynh_app_setting_set --app=$app --key=file_port --value=$file_port
ynh_app_setting_set --app=$app --key=client_port --value=$client_port
ynh_app_setting_set --app=$app --key=server_port --value=$server_port
ynh_app_setting_set --app=$app --key=http_port --value=$http_port
ynh_app_setting_set --app=$app --key=https_port --value=$https_port
ynh_app_setting_set --app=$app --key=component_port --value=$component_port
ynh_app_setting_set --app=$app --key=telnet_port --value=$telnet_port

# Optional: Expose this port publicly
# (N.B.: you only need to do this if the app actually needs to expose the port publicly.
# If you do this and the app doesn't actually need you are CREATING SECURITY HOLES IN THE SERVER !)

# Open the port
# ynh_script_progression --message="Configuring firewall..."
# ynh_exec_warn_less yunohost firewall allow --no-upnp TCP $port

#=================================================
# INSTALL DEPENDENCIES
#=================================================
ynh_script_progression --message="Installing dependencies..."

ynh_install_app_dependencies $pkg_dependencies

#=================================================
# CREATE DEDICATED USER
#=================================================
ynh_script_progression --message="Configuring system user..."

# Create a system user
ynh_system_user_create --username=$app

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================
ynh_script_progression --message="Setting up source files..."

builddir="$(mktemp -d)"
# Download, check integrity, uncompress and patch the source from app.src
ynh_setup_source --dest_dir="$builddir"

#=================================================
# SPECIFIC SETUP
#=================================================
# BUILD PROSODY
#=================================================
ynh_script_progression --message="Building Prosody..."

update-alternatives --set lua-interpreter /usr/bin/lua5.4

pushd "$builddir"
	./configure --prefix=/usr
	make
	make install
popd

ynh_secure_remove --file="$builddir"

#=================================================
# CREATE DATA DIRECTORY
#=================================================
ynh_script_progression --message="Creating a data directory..."

datadir=/var/lib/$app
ynh_app_setting_set --app=$app --key=datadir --value=$datadir

mkdir -p $datadir

chmod 750 "$datadir"
chmod -R o-rwx "$datadir"
chown -R $app:$app "$datadir"

#=================================================
# ADD A CONFIGURATION
#=================================================
ynh_script_progression --message="Adding a configuration file..."

config_path=/etc/$app
ynh_app_setting_set --app=$app --key=config_path --value=$config_path
mkdir -p $config_path
mkdir -p $config_path/{certs,conf.avail,conf.d}

ynh_add_config --template="../conf/prosody.cfg.lua" --destination="$config_path/prosody.cfg.lua"
ynh_add_config --template="../conf/example.com.cfg.lua" --destination="$config_path/conf.avail/example.com.cfg.lua"
#ynh_add_config --template="../conf/localhost.cfg.lua" --destination="$config_path/conf.avail/localhost.cfg.lua"
#ln -s $config_path/conf.avail/localhost.cfg.lua $config_path/conf.d/

chown root:root "$config_path"
chmod 755 "$config_path"

chown root:$app "$config_path/conf.d"
chmod 754 "$config_path/conf.d"

chown root:$app "$config_path/conf.avail"
chmod 754 "$config_path/conf.avail"

chown root:$app "$config_path/certs"
chmod 750 "$config_path/certs"

#=================================================
# SETUP SYSTEMD
#=================================================
ynh_script_progression --message="Configuring a systemd service..."

# Create a dedicated systemd config
ynh_add_systemd_config

#=================================================
# GENERIC FINALIZATION
#=================================================
# SETUP LOGROTATE
#=================================================
ynh_script_progression --message="Configuring log rotation..."

mkdir -p "/var/log/$app"
chmod 750 "/var/log/$app"
chmod -R o-rwx "/var/log/$app"
chown -R $app:adm "/var/log/$app"

# Use logrotate to manage application logfile(s)
ynh_use_logrotate

#=================================================
# INTEGRATE SERVICE IN YUNOHOST
#=================================================
ynh_script_progression --message="Integrating service in YunoHost..."

yunohost service add $app --log="/var/log/$app/$app.log"

#=================================================
# START SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Starting a systemd service..."

# Start a systemd service
ynh_systemd_action --service_name=$app --action="start" --log_path="/var/log/$app/$app.log"

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Installation of $app completed"
